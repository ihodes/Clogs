{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf290
{\fonttbl\f0\fswiss\fcharset0 Optima-Regular;}
{\colortbl;\red255\green255\blue255;}
{\info
{\creatim\yr2010\mo5\dy29\hr22\min16\sec4\timesinceref296882164}}\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\b\fs46 \cf0 Clogs
\b0\fs28 \

\i Clojure baked blogging
\i0 \
\

\b\fs32 What does it need to do?
\b0\fs28 \
I \'95 Post display\
    (a) an index/main blog page\
        - with 
\i n
\i0  posts on it\
        - each post perma-linked to its own page\
    (b) archives\
\
II \'95 Maintain an RSS feed\
\
III \'95 Post changes are reflected with minimal effort\
    (a) When a post is edited\
        - Title\
		Index (if in the index), Archives, RSS, PermPage\
        - Text\
		Index (if in it), Archives, PermPage\
        - Delete\
		Index, Archives, RSS, PermPage\
\
IV \'95 Handle comments in an oven-friendly manner\
\

\b\fs34 Specs\

\b0\fs28 I \'95 Posts are uploaded as XML files\
	\'95 they must be in a specific format, seen below\
	\'95 uploaded to a specific folder (cloguploads)\
	\'95 escaped HTML and/or Markdown must be in the <post-text> of the XML file\
		* clgptime is the time Clogs saw the file uploaded: used internally\
		* clgid is the post id Clogs gives to the post\
		* clgurl is the url the author can enter or Clogs gives the post\
---------------------------------------------------------------------------------------------------\
-------------------------------------FORMAT-------------------------------------------------\
---------------------------------------------------------------------------------------------------\
<post> \
	<title> Post title. </title>\
	<pubdate> May 30th 2010 </pubdate>\
	<clgptime> 1436700000 </clgptime> \
	<clgurl> post_title </clgurl>\
	<clgid> 103 </clgid>\
	<author> The author </author>\
	<post-text> The content &copy; of the *post* </post-text>\
</post>\
---------------------------------------------------------------------------------------------------\
---------------------------------------------------------------------------------------------------\
---------------------------------------------------------------------------------------------------\
II \'95 Posts are recognized (how?) and processed (and moved to another folder?)\
	\'95 XML is modified\
		\'95 clgptime is injected into the XML\
		\'95 clgurl is generated from the title if not supplied\
		\'95 clgid is generated (inc ref)\
	\'95 XML is parsed into a map\
		\'95 is formatted into the individual page template, and that page is created at clgurl\
		\'95 is added to the archives.xml file\
		\'95 is added to the posts.xml file, and the last file is removed if there are more than 
\i n
\i0  \
\
III \'95 Building archives and index\
	\'95 Build Index\
		\'95 Rebuilds (formats into the template_index file) the index from posts.xml\
	\'95 Build Archives\
		\'95 Rebuilds the archives (formats into template_archives) from archives.xml\
			* can this be done by prepending to the HTML file?\
\
IV \'95 Editing and deleting \
	\'95 
\fs26 \
\

\b\fs36 Implementation\

\b0\fs28 Remember, everything writing to files should be atomic. \
IDEAS :\
	keep a .txt of all posts ordered by index. \
		-> in it have a list of all files in index and their names and locations\
\
\

\b\fs36 Next Steps\

\b0\fs28 \'95 Verify that build-index works (rename?)\
\'95 Create the build-archives function\
\'95 Handle perma-links to pages\
\'95 Create the build-rss function \
\'95 Launch\
\
\'95 Change XML parsing and generating so we use Enlive (will this be okay?)\
\
\'95 Make side-effect operations atomic (operate on XML files and let no one else operate on them)\
\'95 Markdown parser, and place it between parsing the XML post and generating the HTML\
\
\'95 Add a comment system\
}